# Treating missing values with mean strategy + cross validation





import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score

# Load the dataset
data_path = r"C:\Users\Jaber\OneDrive - University of Florida\Educational\Research\MLFHRT\FHR-dataset-CTUUHB\combined_FHR_data_resampled_with_minutes.csv"
df = pd.read_csv(data_path)

# Convert labels to binary (1 or 2 to 0 or 1)
df['label'] = df['label'].apply(lambda x: 0 if x == 1 else 1)

# Exclude the last column from zero value treatment
cols_to_impute = df.columns[:-1]
df[cols_to_impute] = df[cols_to_impute].replace(0, np.nan)

# Impute missing values using mean imputation
imputer = SimpleImputer(strategy='mean')
df[cols_to_impute] = imputer.fit_transform(df[cols_to_impute])

# Extract features (FHR time series) and labels
X = df.iloc[:, 1:-1].values
y = df['label'].values

# Standardize the features (mean=0, std=1)
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Define a function to create the RNN model
def create_model():
    model = tf.keras.Sequential([
        tf.keras.layers.LSTM(64, return_sequences=True, input_shape=(X.shape[1], 1)),
        tf.keras.layers.LSTM(64),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Initialize cross-validation
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)
accuracies = []

# Perform cross-validation
for train_index, test_index in kfold.split(X, y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]

    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

    model = create_model()
    model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=0)

    y_pred = (model.predict(X_test) > 0.5).astype(int)
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)

# Calculate and print the mean accuracy over all folds
mean_accuracy = np.mean(accuracies)
print(f"Mean Accuracy: {mean_accuracy * 100:.2f}%")
